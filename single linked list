class Node{
    int data;
    Node next;
    
    Node(int data){
        
        this.data = data;
        this.next = null;
    }

}

public class SinglyLinkedList{
    private int size = 0;
    
    Node head = null;
    
    public void insertAtBeg(int data){
        Node newNode = new Node(data);
        newNode.next = head;
        head=newNode;
        size++;
    }
    
    
    public void insertAtend(int data){
        Node newNode = new Node(data);
        
        Node temp = head;
        while(temp.next!=null){
            temp = temp.next;
        }
        temp.next = newNode;
        size++;
    }


     public void insertAtAnySpecificPosition(int data, int pos){
         if(pos < 0 || pos > size){
             System.out.println("Index out of bounds");
         }
         
         
         Node newNode = new Node(data);
         if(pos == 0){
             newNode.next = head;
             head = newNode;
         }
         else {
             Node current = head;
             for (int i = 0; i < pos - 1; i++){
                 current = current.next;
             } 
             newNode.next = current.next;
             current.next = newNode;
         }
         size++;
         
     }

    
    public void display(){
        Node temp = head;
        while(temp!=null){
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        
        System.out.print("null");
    }
    
    public void deleteAtBeginning(){
        if(head==null){
            System.out.println("list is empty");
        }
        else{
            System.out.println("Deleted from beginning "+head.data);
            head=head.next;
        }
    }
    public void deleteAtEnd(){
        if(head==null){
            System.out.println("list is empty");
            return;
        }
        if(head.next==null){
            System.out.println("Deleting the only node in the list: " + head.data);
            head=null;
            return;
        }
        Node temp=head;
        while(temp.next.next!=null){
            temp=temp.next;
        }
        System.out.println("Deleting node at the end with value: " + temp.next.data);
        temp.next=null;
    }
   public void deleteAtspecificposition(int position) {
    if (head == null) {
        System.out.println("List is empty. Nothing to delete.");
        return;
    }

    if (position <= 0) {
        System.out.println("Invalid position: " + position);
        return;
    }

    if (position == 1) {
        System.out.println("Deleting node at position 1 with value: " + head.data);
        head = head.next;
        return;
    }

    Node temp = head;
    for (int i = 1; i < position - 1; i++) {
        if (temp == null || temp.next == null) {
            System.out.println("Position " + position + " is out of bounds.");
            return;
        }
        temp = temp.next;
    }

    if (temp.next == null) {
        System.out.println("Position " + position + " is out of bounds.");
        return;
    }

    System.out.println("Deleting node at position " + position + " with value: " + temp.next.data);
    temp.next = temp.next.next;
}
    public static void main(String[] args){
        SinglyLinkedList list = new SinglyLinkedList();
        list.insertAtBeg(10);
        list.insertAtBeg(20);
        list.insertAtBeg(30);
        list.insertAtBeg(40);
        list.insertAtBeg(50);
        list.insertAtBeg(60);
        list.insertAtend(100);
        list.insertAtend(200);
        list.insertAtend(12);
        list.insertAtAnySpecificPosition(25, 1);
        list.deleteAtBeginning();
        list.deleteAtEnd();
        list.deleteAtspecificposition(2);
        list.display();
    }
    
    
}
